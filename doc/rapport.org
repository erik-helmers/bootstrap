#+title: Bootstrap
#+author: Erik Helmers

#+startup: latexpreview fold
#+latex_header: \setcounter{tocdepth}{2}
#+latex_header: \usepackage{proof}
#+latex_header: \usepackage{mathpartir}
#+latex_header: \usepackage{amsmath,amssymb,amsthm,textcomp}
#+latex_header: \usepackage{listofitems}
#+latex_header: \usepackage{bssetup}
#+latex_header: \usepackage{xparse}
#+latex_header: \usepackage{stmaryrd}

L'objectif de ce projet de recherche est d'implémenter un système de type qui intègre la descriptions des types au sein de la théorie des types.

* Design

** Préliminaires : Types dépendants

Les types dépendants constituent le socle de ce projet, il est donc de bon ton de commencer par un rapide rappel sur la notion. \\

Le lecteur famillier avec un language de programmation typé moderne aura été exposé à la notion de type générique (ou polymorphique). Ce sont les types qui sont fonctions d'autre types. Par exemple, les listes en OCaml sont décrites par ='a list= où ='a= représente nécessairement un type (=int=, =char=, ...). Ce mécanisme rend plus ergonomique la manipulation de structure de données. \\

Les types dépendants eux, sont fonction de termes. Un exemple habituel est celui des listes dont la longueur est représentée dans le type. On pourrait imaginer la notation =(int * 'a) list= où =(5, int) list= est le type des listes d'entier de longueur 5. \\

# TODO: Attention à ne pas confondre ce concept avec un simple : =int * 'a list=, on veut décrire une contrainte au niveau du typage pas ajouter des données.

Ce qui rend cruciale l'introduction de cette expressivité, est qu'elle permet d'encoder, en plus de sa structure, la logique d'un type. Par nature, les types dépendants décrivent donc un comportement dynamique.\\

Pour illustrer ce propos, prenons en exemple les fonctions de choix de l'axiome éponyme.

   - Mathématiquement, soit \( X \) un ensemble, alors une fonction \(f\) est de choix si elle a pour structure \[ f : \mathcal{P}(X) \to X    \] et qu'elle vérifie \[\forall S \in \mathcal{P}(X), f(S) \in S\]

   - Dans un language simplement typé, en supposant que \(\textsf{X}\) et \(\textsf{P(X)}\) désignent des types, on peut décrire la structure d'une fonction de choix:

    #+begin_src ocaml
    val f : P(X) -> X
    #+end_src

   - Avec des types dépendants, il est aussi possible d'en décrire la logique:

    #+begin_src ocaml
    val f : (S : P(X)) -> S
    #+end_src

     Un lecteur attentif pourrait remarquer que cette déclaration n'est pas strictement compatible, à priori, avec les règles données en ???. Cela n'entre pas dans le périmètre de ce projet, mais il est possible de résoudre ce problème en introduisant une hiérarchie des types.

  De l'introduction des types dépendants, il découle un phénomène supplémentaire. Types et valeurs sont nécessairement applatis sur le même plan syntaxique. Le gain d'expressivité est donc aussi accompagné d'une simplification du language. L'objectif final de ce projet est de reproduire un résultat analogue, cette fois sur la description de types dépendants inductifs.

** Description des structures inductives

Nous allons commencer par faire écho à l'introduction de la section précédente.

#+begin_src ocaml
type 'a list = Nil | Cons of 'a * 'a list

type (n: int, 'a) list = match n with
  | Zero -> Nil
  | Suc n' -> Cons of 'a * (n', 'a) list
#+end_src

La description des types ne fait pas parti du language mais d'un méta-language. De ce fait, il est impossible de les manipuler, ni même de les inspecter dans notre théorie des types.

* Construction

Cette partie est la construction progressive d'un système de type suffisant pour décrire des types en son sein.

** Lambda calcul minimal

La première étape du projet consiste en l'établissement d'un interprétateur minimal avec type dépendant.

*** Syntaxe

\begin{decl}{\te, \tty, \tk}
 \drule{\te: \tty                 }{annotated term}
 \drule{\tv                       }{variable}
 \drule{\tlam{x}{\te}             }{lambda}
 \drule{\tapp{\te}{\te[2]}        }{application}
 \drule{\tpi{x}{\tty}{\tty[2]}    }{pi type}
 \drule{\ttup{\te}{\te[2]}        }{tuple}
 \drule{\tfst{\te}                }{fst}
 \drule{\tsnd{\te}                }{snd}
 \drule{\tsig{\tv}{\tty}{\tty[2]} }{sigma type}
 \drule{\tstar                    }{type of types}
\end{decl}


où $\te$, $\tty$, $\tk$ représentent des valeurs, des types et des kinds respectivement.

*** Contexte

\begin{decl}{\ctx}
    \drule{\epsilon}{empty context}
    \drule{\ctx, \tv:\vty}{adding a variable}
\end{decl}

\begin{mathpar}
\inferrule*{  }{ \ctxValid{\epsilon} }
\inferrule*
    { \ctxValid{\ctx} \\ \ctx \ctxmap \tycheck{\vty}{\vstar} }
    { \ctxValid{\ctx, \tv : \vty} }
\end{mathpar}

*** Evaluation

\begin{decl}{\ve, \vty}
    \drule{\vn                         }{neutral term}
    \drule{\vlam {\vv} {\ve}           }{lambda}
    \drule{\vpi {\tv} {\vty} {\vty[2]} }{dependent function space}
    \drule{\vtup {\ve} {\ve[2]}        }{tuple}
    \drule{\vsig {\tv}{\vty}{\vty[2]}  }{dependent pair space }
    \drule{\vstar                      }{type of types}
\end{decl}

\begin{decl}{\vn}
    \drule{\vv                         }{variable }
    \drule{\napp{\vn}{\ve}             }{neutral app}
    \drule{\nfst{\vn}                  }{neutral first projection}
    \drule{\nsnd{\vn}                  }{neutral second projection}
\end{decl}

\begin{mathpar}


\inferrule*[right=(Star)] {\\} { \evalsto {\tstar}{\vstar} } \and

\inferrule*[right=(Var)]{\\}{ \evalsto {\tv}{\vv} } \and

\inferrule*[right=(Ann)]
  { \evalsto {\te}{\ve} }
  { \evalsto {\te:\tty}{\ve} }
\and

\inferrule*[right=(Lam)]
    { \evalsto {\te}{\ve} }
    { \evalsto {\tlam{\tv}{\te}}{\vlam{x}{\ve}} }
\and
\inferrule*[right=(Tuple)]
    { \evalsto {\te}{\ve} \\
      \evalsto {\te[2]}{\ve[2]} }
    { \ttup{\te}{\te[2]} \evalsto \ttup{\ve}{\ve[2]} }
\and

\inferrule*[right=(App)]
  { \evalsto {\te}{\vlam{\vv}{\ve}} \\
    \evalsto {\tsubst{\ve[1]}{\tv}{\te[2]}}{\ve[2]} }
  { \evalsto {\tapp{\te}{\te[2]}}{\ve[2]} }
\and
\inferrule*[right=(NApp)]
  { \evalsto {\te}{\vn} \\ \evalsto {\te[2]}{\ve[2]} }
  { \evalsto {\tapp{\te}{\te[2]}}{\napp{\vn}{\ve[2]}} }
\and

\inferrule*[right=(Fst)]
  { \evalsto {\te}{\ttup{\ve}{\ve[2]}} }
  { \evalsto {\tfst{\te}}{\ve} }
\and

\inferrule*[right=(Snd)]
  { \evalsto {\te}{\ttup{\ve}{\ve[2]}} }
  { \evalsto {\tsnd{\te}}{\ve[2]}  }
\and

\inferrule*[right=(NFst)]
  { \evalsto {\te}{\vn} }
  { \evalsto {\tfst{\te}}{\nfst{\vn}} }
\and

\inferrule*[right=(NSnd)]
  { \evalsto {\te}{\vn} }
  { \evalsto {\tsnd{\te}}{\nsnd{\vn}} }
\and

\inferrule*[right=(Pi)]
  { \evalsto {\tty}{\vty} \\ \evalsto {\tty[2]}{\vty[2]} }
  { \evalsto {\tpi{\tv}{\tty}{\tty[2]}}{\vpi{\vv}{\vty}{\vty[2]}} }
\and

\inferrule*[right=(Sigma)]
  { \evalsto {\tty}{\vty} \\ \evalsto {\tty[2]}{\vty[2]} }
  { \evalsto {\tsig{\tv}{\tty}{\tty[2]}}{\vsig{\vv}{\vty}{\vty[2]}} }
\and


\end{mathpar}

*** Typage

Dans la suite, nous notons \( \tysynth {\te}{\vty} \) quand le terme  \( \te \) se synthétise en \(\vty\) et \( \tycheck{e}{\vty} \) quand il est possible de vérifier que \(\te\) est un \(\vty\).

\begin{mathpar}
\centering

\inferrule*[right=(Chk)]
  { \ctx \ctxmap \tysynth {\te}{\vty} }
  { \ctx \ctxmap \tycheck{\te}{\vty} }
\and

\inferrule*[right=(Ann)]
  { \ctx \ctxmap \tycheck{\tty}{\vstar} \\ \evalsto {\tty}{\vty} \\
   \ctx \ctxmap \tycheck{\te}{\vty}}
  { \ctx \ctxmap \tysynth {(\te:\tty)}{\vty} }
\and


\inferrule*[right=(Star)]
  { }
  { \ctx \ctxmap \tycheck{\tstar}{\vstar} }
\and


\inferrule*[right=(Var)]
   { \ctx(\tv) = \vty }
   { \ctx \ctxmap \tysynth {\tv}{\vty} }
\and

\inferrule*[right=(Lam)]
  { \ctx,\tv : \vty \ctxmap \tycheck{\te}{\vty[2]} }
  { \ctx \ctxmap \tycheck{\vlam{\tv}{\te}}{\vpi{\tv}{\vty}{\vty[2]}} }
\and

\inferrule*[right=(Tuple)]
  { \ctx \ctxmap \tycheck{\te}{\vty} \\  \ctx \ctxmap \tycheck{\te[2]}{\vty[2]}}
  { \ctx \ctxmap \tycheck {\vtup{\te}{\te[2]}}{\vsig{\tv}{\vty}{\vty[2]}}}
\and

\inferrule*[right=(App)]
  { \ctx \ctxmap \tysynth {\te}{\vpi{x}{\vty}{\vty[2]}}  \\  \ctx \ctxmap \tycheck {\te[2]}{\vty} \\ \evalsto {\tsubst{\vty[2]}{\tv}{\te[2]}}{\vty[3]} }
  { \ctx \ctxmap \tysynth {\tapp{\te}{\te[2]}}{\vty[3]} }
\and

\inferrule*[right=(Fst)]
  { \ctx \ctxmap \tysynth {\te}{\vsig{x}{\vty}{\vty[2]}} }
  { \ctx \ctxmap \tysynth {\tfst{\te}}{\vty} }
\and

\inferrule*[right=(Snd)]
  { \ctx \ctxmap \tysynth {\te}{\vsig{x}{\vty}{\vty[2]}} \\
    \evalsto {\tsubst{\vty[2]}{\tv}{\tfst{e}}}{\vty[3]} }
  { \ctx \ctxmap \tysynth {\tsnd{\te}}{\vty[3]} }
\and


\inferrule*[right=(Pi)]
   { \ctx \ctxmap \tycheck {\tty}{\vstar} \\ \evalsto {\tty}{\vty} \\ \ctx,\tv:\vty \ctxmap \tycheck {\tty[2]}{\vstar} }
   { \ctx \ctxmap \tycheck {\tpi{\tv}{\tty}{\tty[2]}}{\vstar} }
\and

\inferrule*[right=(Sigma)]
   { \ctx \ctxmap \tycheck {\tty}{\vstar} \\ \evalsto {\tty}{\vty} \\ \ctx,\tv:\vty \ctxmap \tycheck {\tty[2]}{\vstar} }
   { \ctx \ctxmap \tycheck {\tsig{\tv}{\tty}{\tty[2]}}{\vstar} }
\and
\end{mathpar}

** Interlude : booleans

At this point, it is useful to be able to run some sanity checks on the implementation.
This is removed later, once we get our descriptions working.

*** Syntaxe

\begin{decl}{\te, \tty, \tk}
 \drule{...}{}
 \drule{\ttrue}{}
 \drule{\tfalse}{}
 \drule{\tcond{\te}{\tv}{\tty}{\te[2]}{\te[3]}}{condition}
 \drule{\tboolty}{type of a bool}
\end{decl}

*** Evaluation

\begin{decl}{\ve, \vty}
    \drule{...}{}
    \drule{\vtrue}{}
    \drule{\vfalse}{}
    \drule{\vboolty}{}
\end{decl}

\begin{decl}{\vn}
    \drule{...}{}
    \drule{\ncond{\ve}{\tv}{\vty}{\ve[2]}{\ve[3]}}{}
\end{decl}


\begin{mathpar}

\inferrule*[right=(True)]
  { }
  { \evalsto {\ttrue}{\vtrue} }
\and

\inferrule*[right=(False)]
  { }
  { \evalsto {\tfalse}{\vfalse} }
\and

\\\\

\inferrule*[right=(CondT)]
  { \evalsto {\te}{\vtrue} \\ \evalsto {\te[2]}{\ve} }
  { \evalsto {\tcond{\te}{\tv}{B}{\te[2]}{\te[3]}}{\ve} }
\and

\inferrule*[right=(CondF)]
  { \evalsto {\te}{\vtrue} \\ \evalsto {\te[3]}{\ve} }
  { \evalsto {\tcond{\te}{\tv}{B}{\te[2]}{\te[3]}}{\ve} }
\and

\inferrule*[right=(NCond)]
  { \evalsto {\te}{\vn} \\ \evalsto {\te[2]}{\ve[1]} \\ \evalsto {\te[3]}{\ve[2]}}
  { \evalsto {\tcond{\te}{\tv}{B}{\te[2]}{\te[3]}}{\ncond{\vn}{\tv}{\vty}{\ve[1]}{\ve[2]}} }
\and

\\\\

\inferrule*[right=(BoolTy)]
  { }
  { \evalsto{\tboolty}{\vboolty} }
\and

\end{mathpar}

*** Typing

\begin{mathpar}

\inferrule*[right=(True)]
  { }
  { \tycheck{\ttrue}{\vboolty} }
\and

\inferrule*[right=(False)]
  { }
  { \tycheck{\tfalse}{\vboolty} }
\and

\inferrule*[right=(Cond)]
  { \ctx \ctxmap \tycheck{\te}{\vboolty} \\
    \ctx,\tv:\vboolty \ctxmap \tycheck{B}{\vstar} \\
    \evalsto{\tsubst{B}{\tv}{\te}}{\vty} \\
 }
  { \ctx \ctxmap \tysynth {\tcond{\te}{\tv}{B}{\te[2]}{\te[3]}}{\vty} }
\and

\inferrule*[right=(BoolTy)]
  { }
  { \tycheck{\tboolty}{\vstar} }
\and

\end{mathpar}

** Enumerations

*** Syntax

\begin{decl}{\te, \tty, \tk}
 \drule{...}{}
 \drule{\tnil}{}
 \drule{\tunit}{}
 \drule{\tlabel{\tl}}{label}
 \drule{\tlabelty}{label type}
 \drule{\tlsnil}{ }
 \drule{\tlscons{\tl}{\tls}}{}
 \drule{\tlabelsty}{labels type}
\end{decl}

*** Evaluation

\begin{mathpar}

 \inferrule*[right=(RecordNil)]
  { \evalsto {\tls} {\tlsnil} }
  { \evalsto {\trecord{\tls}{\tv}{B}}{\tunit} }
\and

 \inferrule*[right=(RecordCons)]
  { \evalsto {\tls} {\tlscons{\tl}{\tls[2]}} \\
    \evalsto {\tsubst{B}{\tv}{\teze}} {\vty} \\
    \evalsto {\trecord{\tls[2]}{\tv}{\tsubst{B}{\tv}{\tesuc{\tv}}}} {\vty[2]} }
  { \evalsto{\trecord{\tls}{\tv}{B}}{\vsigan{\vty}{\vty[2]}} }
\and


 \inferrule*[right=(NRecord)]
  { \evalsto {\tls} {\vn} }
  { \evalsto {\trecord{\tls}{\tv}{B}}{\nrecord{\vn}{\tv}{B}} }
\and

\inferrule*[right=(CaseZe)]
  { \evalsto{\te}{\teze} \\
    \evalsto{\tfst{\tid{cs}}}{\ve} }
  { \evalsto {\tcase{\te}{\tv}{B}{\tid{cs}}}{\ve} }
\and

\inferrule*[right=(CaseSuc)]
  { \evalsto{\te}{\tesuc{\te[2]}} \\
    \evalsto{\tsnd{\tid{cs}}}{\tid{cs'}} \\
    \evalsto{\tcase{\te[2]}{\tv}{\tsubst{B}{\tv}{\tesuc{\tv}}}{\tid{cs'}}}{\ve} }
  { \evalsto {\tcase{\te}{\tv}{B}{\tid{cs}}}
             {\ve}}
\and


\inferrule*[right=(CaseZe)]
  { \evalsto{\te}{\vn} \\
    \evalsto{\tid{cs}}{\ve} }
  { \evalsto {\tcase{\te}{\tv}{B}{\tid{cs}}}{\ncase{\vn}{\tv}{B}{\ve}} }
\and

\end{mathpar}
*** Typing

\begin{mathpar}

 \inferrule*[right=(Nil)]
  { }
  {  \tycheck{\tnil}{\tunit} }
\and

\inferrule*[right=(Unit)]
  { }
  { \tycheck{\tunit}{\vstar} }
\and

 \inferrule*[right=(Label)]
  { }
  {  \tycheck {\tlabel{\tl}}{\tlabelty} }
\and

\inferrule*[right=(LabelTy)]
  { }
  { \tycheck {\tlabelty}{\vstar} }
\and

\\\\
\inferrule*[right=(NilL)]
  { }
  { \tycheck {\tlsnil}{\tlabelsty} }
\and
\inferrule*[right=(ConsL)]
  { \ctx \ctxmap \tycheck {\tl}{\tlabelty} \\
    \ctx \ctxmap \tycheck {\tls}{\tlabelsty} }
  { \tycheck {\tlscons{\tl}{\tls}}{\tlabelsty} }
\and

\inferrule*[right=(LabelsTy)]
  { }
  { \tycheck {\tlabelsty}{\vstar} }
\and

\\\\


\inferrule*[right=(Zero)]
  { \ctx \ctxmap \tycheck{\tl}{\tlabelty} \\
    \ctx \ctxmap \tycheck{\tls}{\tlabelsty} }
  { \ctx \ctxmap \tycheck{\teze}{\tenum{\tlscons{\tl}{\tls}}} }
\and

\inferrule*[right=(Suc)]
  { \ctx \ctxmap \tycheck {\tl}{\tlabelty} \\
    \ctx \ctxmap \tycheck {\tls}{\tlabelsty} \\
    \ctx \ctxmap \tycheck {n}{\tenum{\tls}}  }
  { \ctx \ctxmap \tycheck {\tesuc{n}}{\tenum{\tlscons{\tl}{\tls}}} }
\and

\inferrule*[right=(Enum)]
  { \ctx \ctxmap \tycheck {\tls}{\tlabelsty} }
  { \ctx \ctxmap \tycheck {\tenum{\tls}}{\vstar} }
\and
\\\\

\inferrule*[right=(Record)]
  { \ctx \ctxmap \tycheck {\tls}{\tlabelsty} \\
    \ctx, \tv : \tenum{\tls} \ctxmap \tycheck {B}{\tstar} \\
 }
  { \ctx \ctxmap \tysynth {\trecord{\tls}{\tv}{B}}{\vstar} }
\and

\inferrule*[right=(Case)]
  { \ctx \ctxmap \tycheck {\te}{\tenum{\tls}} \\
    \ctx, \tv : \tenum{\tls} \ctxmap \tycheck {B}{\tstar} \\
    \evalsto{\tsubst{B}{\tv}{\te}}{\vty} \\
    \ctx \ctxmap \tycheck {\tid{cs}}{\trecord{\tls}{\tv}{B} }
 }
  { \ctx \ctxmap \tysynth {\tcase{\te}{\tv}{B}{\tid{cs}}}{\vty} }
\and
\end{mathpar}

** Descriptions
*** Syntax

\begin{decl}{\te, \tty}
 \drule{...}{ }
 \drule{\tdunit}{ }
 \drule{\tdvar}{ identity functor }
 \drule{\tdsig{\tty}{\te}}{ }
 \drule{\tdpi{\tty}{\te}}{ }
 \drule{\tdecode{\te}{\tty}}{ }
 \drule{\tdescty}{ descriptor type }
 \drule{\tdmu{\te}}{ }
 \drule{\tdctor{\te}}{ }
\end{decl}

*** Evaluation

\begin{decl}{\ve, \vty}
 \drule{...}{ }
 \drule{\vdunit}{ }
 \drule{\vdvar}{ identity functor }
 \drule{\vdsig{\vty}{\td}}{ }
 \drule{\vdpi{\vty}{\td}}{ }
 \drule{\vdescty}{ descriptor type }
 \drule{\vdmu{\vn}}{ fixpoint }
 \drule{\vdctor{\vn}}{ constructor }
\end{decl}


\begin{decl}{\vn}
 \drule{...}{  }
 \drule{\vdecode{\vn}{\vty}}{ }
\end{decl}


\begin{mathpar}

 \inferrule*[right=(DecodeNil)]
  { \evalsto {\td} {\vdunit} }
  { \evalsto {\tdecode{\td}{\tty}}{\tunit} }
\and

 \inferrule*[right=(DecodeVar)]
  { \evalsto {\td} {\vdvar} \\
    \evalsto {\tty} {\vty} \\
    }
  { \evalsto {\tdecode{\td}{\tty}}{\vty} }
\and

 \inferrule*[right=(DecodeSigma)]
  { \evalsto {\td}{\vdsig{\vty}{\td[2]}} \\
    \evalsto {\tsig{\te}{\vty}{\tdecode{\tapp{\td[2]}{\te}}{\tty}}}{\vty[2]} }
  { \evalsto {\tdecode{\td}{\tty}}{\vty[2]} }
\and

 \inferrule*[right=(DecodePi)]
  { \evalsto {\td} {\vdpi{\vty}{\td[2]}} \\
    \evalsto {\tpi{\te}{\vty}{\tdecode{\tapp{\td[2]}{\te}}{\tty}}}{\vty[2]} }
  { \evalsto {\tdecode{\td}{\tty}}{\vty[2]} }
\and


\end{mathpar}

*** Typing

\begin{mathpar}

\inferrule*[right=]
  { }
  { \ctx \ctxmap \tycheck{\tdunit}{\vdescty} }

\inferrule*[right=]
  { }
  { \ctx \ctxmap \tycheck{\tdvar}{\vdescty} }

\inferrule*[right=]
  { }
  { \ctx \ctxmap \tycheck{\tdescty}{\vstar} }


\inferrule*[right=(DSigma)]
  { \ctx \ctxmap \tycheck{\tty}{\vstar} \\
    \evalsto {\tty}{\vty} \\
     \ctx \ctxmap \tycheck{\td}{\vpian{\vty}{\vdescty}} }
  { \ctx \ctxmap \tycheck{\tdsig{\tty}{\td}}{\vdescty} }

\inferrule*[right=(DPi)]
  { \ctx \ctxmap \tycheck{\tty}{\vstar} \\
    \evalsto {\tty}{\vty} \\
     \ctx \ctxmap \tycheck{\td}{\vpian{\vty}{\vdescty}} }
  { \ctx \ctxmap \tycheck{\tdpi{\tty}{\td}}{\vdescty} }

\inferrule*[right=(Decode)]
  { \ctx \ctxmap \tycheck{\td}{\vdescty} \\
     \ctx \ctxmap \tycheck{\tty}{\vstar} }
  { \ctx \ctxmap \tysynth{\tdecode{\td}{\tty}}{\vstar} }

\inferrule*[right=(Mu)]
  { \ctx \ctxmap \tycheck{\td}{\vdescty} }
  { \ctx \ctxmap \tycheck{\tdmu{\td}}{\vstar} }

\\\\

\inferrule*[right=]
  { \ctx \ctxmap \tycheck{\tty}{\tdecode{\td}{(\tdmu{\td})}} }
  { \ctx \ctxmap \tycheck{\tdctor{\tty}}{\tdmu{\td}} }

\end{mathpar}
