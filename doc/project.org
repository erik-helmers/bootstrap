#+title: Bootstrap
#+author: Erik Helmers

#+startup: latexpreview fold

#+latex_header: \usepackage{proof}
#+latex_header: \usepackage{mathpartir}
#+latex_header: \usepackage{amsmath,amssymb,amsthm,textcomp}
#+latex_header: \usepackage{listofitems}
#+latex_header: \usepackage{bssetup}
#+latex_header: \usepackage{xparse}


#+name: bssetup
#+begin_src latex :tangle bssetup.sty :exports none


% Construit une substitution sur une liste #1
% définie avec \readlist et pour valeur par défaut #2
% Substitution
\newcommand{\varlist}[3]{% 1 = symbol list, 2 = default command, 3 = index
  \ifnum #3>\listlen{#1}[]%
  #2{#3}%
  \else #1[#3]
  \fi
}

% Declarations


\newcounter{declfirstrule} % 0 : this is the first rule / 1 : false


\newcommand{\drule}[2]{%
  \ifnum\value{declfirstrule}=0\stepcounter{declfirstrule}
    &::=& #1 &\quad \text{#2}\\
  \else
    &|& #1 &\quad \text{#2}\\
  \fi
}

\newenvironment{decl}[1]{
  \setcounter{declfirstrule}{0}
  \[\begin{array}{lcll}
    #1
    }{\end{array}\]}

  % Term symbols

  \newcommand{\tid}[1]{\text{#1}}

  % Expression term identifiers
  \readlist*\tesyms{e,e',e''}
  \newcommand{\tedflt}[1]{e_{#1}}
  \newcommand{\te}[1][1]{\varlist{\tesyms}{\tedflt}{#1}}

  % Term type identifiers
  \readlist*\ttysyms{\sigma, \sigma', \sigma''}
  \newcommand{\ttydflt}[1]{\sigma_{#1}}
  \newcommand{\tty}[1][1]{\varlist{\ttysyms}{\ttydflt}{#1}}

  % Term kind identifiers
  \readlist*\tksyms{\kappa, \kappa', \kappa''}
  \newcommand{\tkdflt}[1]{\kappa_{#1}}
  \newcommand{\tk}[1][1]{\varlist{\tksyms}{\tkdflt}{#1}}

  % Term variables (used in binders)
  \readlist*\tvsyms{x, y, z}
  \newcommand{\tvdflt}[1]{x_{#1}}
  \newcommand{\tv}[1][1]{\varlist{\tvsyms}{\tvdflt}{#1}}

  % Type of types
  \newcommand{\tstar}{\star}
  \newcommand{\tsubst}[3]{#1[#2 \mapsto #3]}


  % Value symbols

  % Value identifiers
  \readlist*\vesyms{\nu,\nu',\nu''}
  \newcommand{\vedflt}[1]{\nu_{#1}}
  \newcommand{\ve}[1][1]{\varlist{\vesyms}{\vedflt}{#1}}

  % Type identifiers
  \readlist*\vtysyms{\tau, \tau', \tau''}
  \newcommand{\vtydflt}[1]{\tau_{#1}}
  \newcommand{\vty}[1][1]{\varlist{\vtysyms}{\vtydflt}{#1}}


  % Variables
  \readlist*\vvsyms{x, y, z}
  \newcommand{\vvdflt}[1]{x_{#1}}
  \newcommand{\vv}[1][1]{\varlist{\vvsyms}{\vvdflt}{#1}}

  % Type of types
  \newcommand{\vstar}{\star}

  % Neutrals

  % Variable
  \readlist*\vnsyms{n, n', n''}
  \newcommand{\vndflt}[1]{n_{#1}}
  \newcommand{\vn}[1][1]{\varlist{\vnsyms}{\vndflt}{#1}}


  % Symbols

  \newcommand{\evalsto}{\Downarrow}
  \newcommand{\tycheck}{\Leftarrow}
  \newcommand{\tysynth}{\Rightarrow}

  \newcommand{\ctx}{\Gamma}
  \newcommand{\ctxmap}{\vdash}
  \newcommand{\ctxEmpty}{\Gamma}
  \newcommand{\ctxValid}[1]{\text{valid}(#1)}



  %%% Pi constructors, eliminators and types
  % Lambda
  \newcommand{\tlam}[2]{\lambda #1 \mapsto #2}
  % App
  \newcommand{\tapp}[2]{#1\ #2}
  % Pi
  \newcommand{\tpi}[3]{\Pi(#1:#2).#3}
  %% Values
  % Lambda
  \newcommand{\vlam}[2]{\lambda #1 \mapsto #2}
  % App (neutral)
  \newcommand{\napp}[2]{#1\ #2}
  % Pi
  \newcommand{\vpi}[3]{\Pi(#1:#2).#3}

  %%% Sigma
  % Tuple
  \newcommand{\ttup}[2]{(#1,#2)}
  % Fst
  \newcommand{\tfst}[1]{\text{fst}\ #1}
  % Snd
  \newcommand{\tsnd}[1]{\text{snd}\ #1}
  % Sigma
  \newcommand{\tsig}[3]{\Sigma(#1:#2).#3}
  %% Values
  % Tuple
  \newcommand{\vtup}[2]{(#1,#2)}
  % Fst
  \newcommand{\nfst}[1]{\text{fst}\ #1}
  % Snd
  \newcommand{\nsnd}[1]{\text{snd}\ #1}
  % Sigma
  \newcommand{\vsig}[3]{\Sigma(#1:#2).#3}

#+end_src


* Minimal calculus
** Syntax

\begin{decl}{\te, \tty, \tk}
 \drule{\te: \tty                 }{annotated term}
 \drule{\tv                       }{variable}
 \drule{\tlam{x}{\te}             }{lambda}
 \drule{\tapp{\te}{\te[2]}        }{application}
 \drule{\tpi{x}{\tty}{\tty[2]}    }{pi type}
 \drule{\ttup{\te}{\te[2]}        }{tuple}
 \drule{\tfst{\te}                }{fst}
 \drule{\tsnd{\te}                }{snd}
 \drule{\tsig{\tv}{\tty}{\tty[2]} }{sigma type}
 \drule{\tstar                    }{type of types}
\end{decl}


where $\te$, $\tty$, $\tk$ represent general expressions, types and kinds respectively.

** Context

\begin{decl}{\ctx}
    \drule{\epsilon}{empty context}
    \drule{\ctx, \tv:\vty}{adding a variable}
\end{decl}

\begin{mathpar}
\inferrule*{  }{ \ctxValid{\epsilon} }
\inferrule*
    { \ctxValid{\ctx} \\ \ctx \ctxmap \vty \tycheck \vstar }
    { \ctxValid{\ctx, \tv : \vty} }
\end{mathpar}

** Evaluation

\begin{decl}{\ve, \vty}
    \drule{\vn                         }{neutral term}
    \drule{\vlam {\vv} {\ve}           }{lambda}
    \drule{\vpi {\tv} {\vty} {\vty[2]} }{dependent function space}
    \drule{\vtup {\ve} {\ve[2]}        }{tuple}
    \drule{\vsig {\tv}{\vty}{\vty[2]}  }{dependent pair space }
    \drule{\vstar                      }{type of types}
\end{decl}

\begin{decl}{\vn}
    \drule{\vv                         }{variable }
    \drule{\napp{\vn}{\ve}             }{neutral app}
    \drule{\nfst{\vn}                  }{neutral first projection}
    \drule{\nsnd{\vn}                  }{neutral second projection}
\end{decl}

\begin{mathpar}


\inferrule*[right=(Star)] {\\} { \tstar \evalsto \vstar} \and

\inferrule*[right=(Var)]{\\}{ \tv \evalsto \vv} \and

\inferrule*[right=(Ann)]
  {\te \evalsto \ve}
  {\te: \tty \evalsto \ve}
\and

\inferrule*[right=(Lam)]
    {\te\evalsto \ve }
    { \tlam{\tv}{\te} \evalsto \vlam{x}{\ve}}
\and
\inferrule*[right=(Tuple)]
    {\te\evalsto \ve \\ \te[2] \evalsto \ve[2] }
    { (\te, \te[2]) \evalsto (\ve, \ve[2])}
\and

\inferrule*[right=(App)]
  {\te \evalsto \vlam{\vv}{\ve} \\ \ve[1][ x \mapsto \te[2]] \evalsto \ve[2]}
  { \te\ \te[2] \evalsto \ve[2]}
\and
\inferrule*[right=(NApp)]
  {\te \evalsto \vn \\ \te[2] \evalsto \ve[2]}
  {\te \ \te[2] \evalsto \napp{\vn}{\ve[2]}}
\and

\inferrule*[right=(Fst)]
  {\te  \evalsto (\ve ,\ve[2])}
  { \tfst{\te} \evalsto \ve}
\and

\inferrule*[right=(Snd)]
  {\te \evalsto (\ve,\ve[2])}
  { \tsnd{\te} \evalsto \ve[2]}
\and

\inferrule*[right=(NFst)]
  {\te  \evalsto \vn}
  { \tfst{\te} \evalsto \nfst{\vn}}
\and

\inferrule*[right=(NSnd)]
  {\te  \evalsto \vn}
  { \tsnd{\te} \evalsto \nsnd{\vn}}
\and

\inferrule*[right=(Pi)]
  {\tty \evalsto \vty \\ \tty[2] \evalsto \vty[2]}
  {\tpi{\tv}{\tty}{\tty[2]} \evalsto \vpi{\vv}{\vty}{\vty[2]}}
\and

\inferrule*[right=(Sigma)]
  {\tty \evalsto \vty \\ \tty[2] \evalsto \vty[2]}
  {\tsig{\tv}{\tty}{\tty[2]} \evalsto \vsig{\vv}{\vty}{\vty[2]}}
\and


\end{mathpar}

** Typing

In the following, \(\te\tysynth \vty\) is an expression whose type synthezises to \(\vty\) while \(e \tycheck \vty\) is checkable.

\begin{mathpar}
\centering

\inferrule*[right=(Chk)] { \ctx \vdash \te \tysynth \vty }{ \ctx \vdash \te \tycheck \vty }
\and

\inferrule*[right=(Ann)]
  {\ctx \vdash \tty \tycheck * \\ \tty \evalsto \vty \\
   \ctx \vdash\te\tycheck \vty}
  { \ctx \vdash (\te:\tty) \tysynth \vty }
\and


\inferrule*[right=(Star)]{ }{ \ctx \vdash \tstar \tycheck \vstar }
\and


\inferrule*[right=(Var)] { \ctx(\tv) = \vty }{ \ctx \vdash \tv \tysynth \vty }
\and

\inferrule*[right=(Lam)]
  { \ctx,\tv : \vty \vdash\te\tycheck \vty[2] }
  { \ctx \vdash  \vlam{\tv}{\te} \tycheck \vpi{\tv}{\vty}{} \vty[2]}
\and

\inferrule*[right=(Tuple)]
  { \ctx \vdash\te\tycheck \vty \\  \ctx \vdash \te[2] \tycheck \vty[2]}
  { \ctx \vdash  (\te,\te[2]) \tycheck \vsig {\tv}{\vty}{\vty[2]}}
\and

\inferrule*[right=(App)]
  { \ctx \vdash\te\tysynth  \vpi{x}{\vty}{\vty[2]}  \\  \ctx \vdash \te[2] \tycheck \vty \\ \vty[2][x \mapsto \te[2]] \evalsto \vty[3] }
  { \ctx \vdash \te\ \te[2] \tysynth \vty[3]}
\and

\inferrule*[right=(Fst)]
  { \ctx \vdash\te\tysynth \vsig{x}{\vty}{\vty[2]}}
  { \ctx \vdash \tfst{\te} \tysynth \vty}
\and

\inferrule*[right=(Snd)]
  { \ctx \vdash\te\tysynth \vsig{x}{\vty}{\vty[2]} \\ \vty[2][x \mapsto \text{fst}\ e] \evalsto \vty[3] }
  { \ctx \vdash \tsnd{\te} \tysynth \vty[3]}
\and


\inferrule*[right=(Pi)]
   { \ctx \vdash \tty \tycheck \vstar \\ \tty \evalsto \vty \\ \ctx,\tv:\vty \vdash \tty[2] \tycheck \vstar }
   { \ctx \vdash \tpi{\tv}{\tty}{\tty[2]} \tycheck \vstar }
\and

\inferrule*[right=(Sigma)]
   { \ctx \vdash \tty \tycheck \vstar \\ \tty \evalsto \vty \\ \ctx,\tv:\vty \vdash \tty[2] \tycheck \vstar }
   { \ctx \vdash \tsig{\tv}{\tty}{\tty[2]} \tycheck \vstar }
\and
\end{mathpar}


\begin{mathpar}
\and

\and
\end{mathpar}
